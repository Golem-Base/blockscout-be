name: golem-base

volumes:
  mongodb_data:
  mongodb_keyfile:
  golembase_wal:
  golembase_sqlite:
  geth_data:
  postgres:

services:
  setup:
    image: alpine:latest
    volumes:
      - mongodb_keyfile:/mongodb-keyfile
    command: >
      /bin/sh -c "
      mkdir -p /mongodb-keyfile;
      if [ ! -f /mongodb-keyfile/mongodb-keyfile ]; then
          echo 'ThisIsA32ByteKeyForMongoDBReplSet' > /mongodb-keyfile/mongodb-keyfile;
          chmod 400 /mongodb-keyfile/mongodb-keyfile;
          chown 999:999 /mongodb-keyfile/mongodb-keyfile;
      fi;
      echo 'MongoDB keyfile initialized'
      "

  op-geth:
    build: ../../op-geth
    ports:
      - 8545:8545
    volumes:
      - golembase_wal:/golembase.wal
      - geth_data:/geth_data
    command: >
      --dev
      --http
      --http.api 'eth,web3,net,debug,txpool,golembase'
      --verbosity 3
      --http.addr '0.0.0.0'
      --http.port 8545
      --http.corsdomain '*'
      --http.vhosts '*'
      --ws
      --ws.addr '0.0.0.0'
      --ws.port 8545
      --golembase.writeaheadlog '/golembase.wal/'
      --datadir '/geth_data'
    healthcheck:
      test: curl -f http://localhost:8545


  mongodb:
    depends_on:
      setup:
        condition: service_completed_successfully
    image : mongo:8.0.6
    restart: on-failure
    command: --bind_ip_all --keyFile /keyfile/mongodb-keyfile --replSet rs0 --dbpath /data/db
    environment:
      - PUID=1000
      - PGID=1000
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_REPLICA_SET_NAME=rs0
    ports:
      - 27017:27017
    volumes:
      - mongodb_keyfile:/keyfile:ro
      - mongodb_data:/data/db
    healthcheck:
      test: |
         echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'localhost:27017'}]}) }" | mongosh "mongodb://admin:password@mongodb:27017/admin?authSource=admin"
      interval: 10s
      start_period: 30s

  mongodb-etl:
    depends_on:
      mongodb:
        condition: service_healthy
      op-geth:
        condition: service_healthy
    build: ../../op-geth
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017
      - WAL_PATH=/golembase.wal
      - RPC_ENDPOINT=http://op-geth:8545
      - DB_NAME=golembase
    volumes:
      - golembase_wal:/golembase.wal
    entrypoint: []
    command: >
      /usr/local/bin/mongodb
      --wal /golembase.wal
      --mongo-uri mongodb://admin:password@mongodb:27017
      --rpc-endpoint http://op-geth:8545
      --db-name golembase

  sqlite-etl:
    depends_on:
      op-geth:
        condition: service_healthy
    build: ../../op-geth
    environment:
      - RPC_ENDPOINT=http://op-geth:8545
      - WAL_PATH=/tmp/golembase.wal
      - DB_PATH=/tmp/golembase-sqlite
    volumes:
      - golembase_wal:/golembase.wal
      - golembase_sqlite:/golembase-sqlite
    entrypoint: []
    command: >
      /usr/local/bin/sqlite
      --wal /golembase.wal
      --db /golembase-sqlite/db
      --rpc-endpoint http://op-geth:8545

  rpcplorer:
    depends_on:
      op-geth:
        condition: service_healthy
    image: dmilhdef/rpcplorer:v0.0.1
    ports:
      - 8080:8080
    environment:
      - NODE_URL=http://op-geth:8545
    restart: on-failure

  postgres:
    image: postgres:16
    restart: always
    #command: postgres -c 'max_connections=200' -c 'client_connection_check_interval=60000'
    environment:
      POSTGRES_PASSWORD: postgres
    ports:
      - 8432:5432
    volumes:
      - ./init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U golem -d blockscout
      start_period: 10s

  stats:
    depends_on:
      - postgres
      - backend
    build:
      context: ../../blockscout-rs/stats
      additional_contexts:
        proto: ../../blockscout-rs/proto
    restart: always
    environment:
      STATS__DB_URL: postgres://golem:12345@postgres:5432/stats
      STATS__BLOCKSCOUT_DB_URL: postgres://golem:12345@postgres:5432/blockscout
      STATS__BLOCKSCOUT_API_URL: http://backend:8001
      STATS__RUN_MIGRATIONS: true
    ports:
      - 8050:8050
    healthcheck:
      test: curl -f http://localhost:8050/health
      start_period: 10s

  visualizer:
    build:
      context: ../../blockscout-rs/visualizer
      additional_contexts:
        proto: ../../blockscout-rs/proto
    restart: always
    ports:
      - 8051:8050
    healthcheck:
      test: curl -f http://localhost:8050/health
      start_period: 10s

  smart-contract-verifier:
    build: ../../blockscout-rs/smart-contract-verifier
    restart: always
    ports:
      - 8052:8050
    healthcheck:
      test: curl -f http://localhost:8050/health
      start_period: 10s

  sig-provider:
    build: ../../blockscout-rs/sig-provider
    restart: always
    ports:
      - 8053:8050
    healthcheck:
      test: curl -f http://localhost:8050/health
      start_period: 10s

  user-ops-indexer:
    depends_on:
      - postgres
      - backend
    build: ../../blockscout-rs/user-ops-indexer
    restart: always
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      USER_OPS_INDEXER__INDEXER__RPC_URL: ws://host.docker.internal:8545
      USER_OPS_INDEXER__DATABASE__CONNECT__URL: postgres://golem:12345@postgres:5432/blockscout
      USER_OPS_INDEXER__DATABASE__RUN_MIGRATIONS: true
    ports:
      - 8054:8050
    healthcheck:
      test: curl -f http://localhost:8050/health
      start_period: 10s

  backend:
    depends_on:
      - postgres
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        RELEASE_VERSION: 7.0.2
    restart: always
    command: sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    stop_grace_period: 1m
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      ETHEREUM_JSONRPC_VARIANT: geth
      ETHEREUM_JSONRPC_HTTP_URL: http://host.docker.internal:8545
      DATABASE_URL: postgres://golem:12345@postgres:5432/blockscout
      SECRET_KEY_BASE: +Jj87Mxir/QLx7YTx+Gr8ytLPcJtDiArLdCSc+uuDkyFzZ5x5su7Vh+qenfLT0cX
      ECTO_USE_SSL: false
      PORT: 8001
      MICROSERVICE_VISUALIZE_SOL2UML_ENABLED: true
      MICROSERVICE_VISUALIZE_SOL2UML_URL: http://visualizer:8050/
      MICROSERVICE_SC_VERIFIER_ENABLED: true
      MICROSERVICE_SC_VERIFIER_URL: http://verifier:8050/
      MICROSERVICE_SIG_PROVIDER_ENABLED: true
      MICROSERVICE_SIG_PROVIDER_URL: http://sig-provider:8050/
    ports:
      - 8001:8001

  frontend:
    depends_on:
      - backend
      - stats
      - visualizer
    build: ../../blockscout-fe
    restart: always
    environment:
      NEXT_PUBLIC_APP_HOST: localhost
      NEXT_PUBLIC_APP_PORT: 3000
      NEXT_PUBLIC_API_PROTOCOL: http
      NEXT_PUBLIC_API_WEBSOCKET_PROTOCOL: ws
      NEXT_PUBLIC_API_HOST: localhost
      NEXT_PUBLIC_API_PORT: 8001
      NEXT_PUBLIC_STATS_API_HOST: http://stats:8050
      NEXT_PUBLIC_VISUALIZE_API_HOST: http://visualizer:8050
      NEXT_PUBLIC_NETWORK_NAME: Golem Base
      NEXT_PUBLIC_NETWORK_ID: 1337
    ports:
      - 8000:3000
